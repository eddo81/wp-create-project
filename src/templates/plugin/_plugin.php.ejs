<?php
/**
 * Functions and definitions, this file must be parseable by PHP 5.2.
 *
 * @package <%= projectPackageName %><% if(projectAuthor.full !== '') { %>
 * @author  "<%- projectAuthor.full %>"<% } if(projectLicense !== undefined) { %>
 * @license <%= projectLicense.type %><% } %>
 * @link    https://developer.wordpress.org/plugins/plugin-basics/header-requirements/
 * @since   <%= projectVersion %>
 *
 * @wordpress-plugin
 * Plugin Name: <%= projectName %><% if(projectUri !== '') { %>
 * Plugin URI: <%= projectUri %><% } if(projectDescription !== '') { %>
 * Description: <%= projectDescription %><% } %>
 * Version: <%= projectVersion %>
 * Requires at least: <%= projectMinWpVersion %>
 * Requires PHP: <%= projectMinPhpVersion %>
 * Author: <%= projectAuthor.name %><% if(projectAuthor.url !== '') { %>
 * Author URI: <%= projectAuthor.url %><% } if(i18n !== false) { %>
 * Text Domain: <%= projectTextDomain %>
 * Domain Path: /languages<% } if(projectLicense !== undefined) { %>
 * License: <%= projectLicense.type %>
 * License URI: <%= projectLicense.url %><% } %>
 */

// Define plugin wide control variables.
define( 'MIN_PHP_VERSION', '<%= projectMinWpVersion %>' );
define( 'MIN_WP_VERSION', '<%= projectMinPhpVersion %>' );

// Define plugin wide paths.
define( 'ROOT_FILE', __FILE__ );
define( 'ROOT_URL', plugin_dir_url( ROOT_FILE ) );

// Path to autoloader.
$composer = dirname( ROOT_FILE ) . DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR . 'autoload.php';

// Array of filenames to include in your plugin.
$required_files = ['helpers', 'setup'];

if ( function_exists( '<%= projectPrefix %>_plugin_error' ) === false ) {
	/**
	 * Helper function for prettying up errors.
	 *
	 * @param string $message The error message body.
	 * @param string $heading The error message heading.
	 * @param string $title The page title.
	 * @param array  $options Optional arguments array.
	 */
	function <%= projectPrefix %>_plugin_error( $message, $heading = '', $title = '', $options = array() ) {
		$title   = $title ?: __( 'plugin error'<% if(i18n !== false) { %>, '<%= projectTextDomain %>'<% } %> );
		$heading = ( $heading ) ? $heading : $title;
		$message = "<h1>{$heading}</h1><br><br>{$message}";
		wp_die( $message, $title, $options );
	};
}

if ( function_exists( '<%= projectPrefix %>_include_plugin_file' ) === false ) {
	/**
	 * Helper function for including plugin files.
	 *
	 * @param string $file The name of the file to include.
	 */
	function <%= projectPrefix %>_include_plugin_file( string $file ) {
		$file = dirname( ROOT_FILE ) . DIRECTORY_SEPARATOR . 'inc' . DIRECTORY_SEPARATOR . "{$file}.php";
		if ( file_exists( $file ) === false ) {
			<%= projectPrefix %>_plugin_error(
				"<code>{$file}</code><br><br>",
				__( 'File not found.'<% if(i18n !== false) { %>, '<%= projectTextDomain %>'<% } %> )
			);
		}
		include $file;
	};
}

// Plugin compatibility check, bail early if requirements are not met.
if ( version_compare( MIN_PHP_VERSION, phpversion(), '>=' ) === true || version_compare( MIN_WP_VERSION, get_bloginfo( 'version' ), '>=' ) === true ) {
	require dirname( ROOT_FILE ) . DIRECTORY_SEPARATOR . 'backwards-compatibility.php';
	return;
}

// Ensure composer autoload.php exists.
if ( file_exists( $composer ) === false ) {
	<%= projectPrefix %>_plugin_error(
		sprintf(
			"<code>{$composer}</code><br><br>%1s <code>%2s</code> %3s",
			__( 'Please run the'<% if(i18n !== false) { %>, '<%= projectTextDomain %>'<% } %> ),
			__( 'composer install'<% if(i18n !== false) { %>, '<%= projectTextDomain %>'<% } %> ),
			__( 'command from the <%= projectType %> root directory.'<% if(i18n !== false) { %>, '<%= projectTextDomain %>'<% } %> )
		),
		__( 'Autoloader not found.'<% if(i18n !== false) { %>, '<%= projectTextDomain %>'<% } %> )
	);
} else {
	include_once $composer;
	array_map( '<%= projectPrefix %>_include_plugin_file', $required_files );
}
